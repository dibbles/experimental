apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: webhook-task
  namespace: tekton-pipelines
spec:
  inputs:
    params:
    - name: Mode
      description: Whether or not to create or delete the webhook
      default: "create"
    - name: CallbackURL
      description: Use the Ingress external URL that's infront of the EventListener ensure you specify the relevant protocol
      default: "https://replacemeip.nip.io"
    - name: GitHubRepoURL
      description: The GitHub repository URL (used for creating and deleting the webhook)
      default: "https://some.github.com/owner/repository"
    - name: GitHubSecretName
      description: The secret name for GitHub (used for creating and deleting the webhook)
      default: "githubsecret"
    - name: GitHubAccessTokenKey
      description: The key name in the secret for the access token (used for creating and deleting the webhook)
      default: "accessToken"
    - name: GitHubUserNameKey
      description: The key name in the secret for the user name (used for creating and deleting the webhook)
      type: string
    - name: GitHubSecretStringKey
      description: The key name for the GitHub secret string (used for creating and deleting the webhook)
      default: "secretToken"
    - name: GitHubServerUrl
      description: The URL of the GitHub server (used for creating and deleting the webhook)
      default: "github.com"
  steps:  
  - name: create-or-delete-webhook
    image: curlimages/curl:latest
    command:
    - sh
    args:
    - -ce
    - |
      set -e
      subscriptionMode="subscribe"
      if [ $(inputs.params.Mode) != "create" ] ; then
        subscriptionMode="unsubscribe"
      fi
      if [ $(inputs.params.GitHubServerUrl) = "github.com" -o $(inputs.params.GitHubServerUrl) = "http://github.com" -o $(inputs.params.GitHubServerUrl) = "https://github.com" ] ; then
        echo "Assuming GitHub.com and not GitHub Enterprise"
        if [ -z $(inputs.params.GitHubUserNameKey) ] ; then
          echo "No GitHub username key found so assuming this is an access token"
          curl -w "\n\nRETURN_CODE=%{http_code}\n\n" -u "token:$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey))" -i "https://api.github.com/hub" -F "hub.mode=$subscriptionMode" -F "hub.topic=$(inputs.params.GitHubRepoURL)/events/push.json" -F "hub.callback=$(inputs.params.CallbackURL)" -F "hub.secret=$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))" | tee push.log
          curl -w "\n\nRETURN_CODE=%{http_code}\n\n" -u "token:$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey))" -i "https://api.github.com/hub" -F "hub.mode=$subscriptionMode" -F "hub.topic=$(inputs.params.GitHubRepoURL)/events/pull_request.json" -F "hub.callback=$(inputs.params.CallbackURL)" -F "hub.secret=$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))" | tee pull.log
        else          
          echo "GitHub username key found so assuming this is a username and password"
          curl -w "\n\nRETURN_CODE=%{http_code}\n\n" -u "$(cat /var/secret/$(inputs.params.GitHubUserNameKey)):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey))" -i "https://api.github.com/hub" -F "hub.mode=$subscriptionMode" -F "hub.topic=$(inputs.params.GitHubRepoURL)/events/push.json" -F "hub.callback=$(inputs.params.CallbackURL)" -F "hub.secret=$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))" | tee push.log
          curl -w "\n\nRETURN_CODE=%{http_code}\n\n" -u "$(cat /var/secret/$(inputs.params.GitHubUserNameKey)):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey))" -i "https://api.github.com/hub" -F "hub.mode=$subscriptionMode" -F "hub.topic=$(inputs.params.GitHubRepoURL)/events/pull_request.json" -F "hub.callback=$(inputs.params.CallbackURL)" -F "hub.secret=$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))" | tee pull.log
        fi
      else
        echo "Assuming GitHub Enterprise"
        if [ -z $(inputs.params.GitHubUserNameKey) ] ; then
          echo "No GitHub Enterprise username key found so assuming this is an access token"
          curl -w "\n\nRETURN_CODE=%{http_code}\n\n" -u "token:$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey))" -i "$(inputs.params.GitHubServerUrl)/api/v3/hub" -F "hub.mode=$subscriptionMode" -F "hub.topic=$(inputs.params.GitHubRepoURL)/events/push.json" -F "hub.callback=$(inputs.params.CallbackURL)" -F "hub.secret=$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))" | tee push.log
          curl -w "\n\nRETURN_CODE=%{http_code}\n\n" -u "token:$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey))" -i "$(inputs.params.GitHubServerUrl)/api/v3/hub" -F "hub.mode=$subscriptionMode" -F "hub.topic=$(inputs.params.GitHubRepoURL)/events/pull_request.json" -F "hub.callback=$(inputs.params.CallbackURL)" -F "hub.secret=$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))" | tee pull.log
          else 
          echo "GitHub Enterprise username key found $(inputs.params.GitHubUserNameKey) so assuming this is a username and password"
          curl -w "\n\nRETURN_CODE=%{http_code}\n\n" -u "$(cat /var/secret/$(inputs.params.GitHubUserNameKey)):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey))" -i "$(inputs.params.GitHubServerUrl)/api/v3/hub" -F "hub.mode=$subscriptionMode" -F "hub.topic=$(inputs.params.GitHubRepoURL)/events/push.json" -F "hub.callback=$(inputs.params.CallbackURL)" -F "hub.secret=$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))" | tee push.log
          curl -w "\n\nRETURN_CODE=%{http_code}\n\n" -u "$(cat /var/secret/$(inputs.params.GitHubUserNameKey)):$(cat /var/secret/$(inputs.params.GitHubAccessTokenKey))" -i "$(inputs.params.GitHubServerUrl)/api/v3/hub" -F "hub.mode=$subscriptionMode" -F "hub.topic=$(inputs.params.GitHubRepoURL)/events/pull_request.json" -F "hub.callback=$(inputs.params.CallbackURL)" -F "hub.secret=$(cat /var/secret/$(inputs.params.GitHubSecretStringKey))" | tee pull.log
        fi
      fi
      PUSH_RETURN_CODE=$(grep "RETURN_CODE" push.log | cut -f 2 -d "=" )
      PULL_RETURN_CODE=$(grep "RETURN_CODE" pull.log | cut -f 2 -d "=" )
      if [ $PUSH_RETURN_CODE -ne 204 -o $PULL_RETURN_CODE -ne 204 ] ; then
        exit 1
      fi
    volumeMounts:
    - name: github-secret
      mountPath: /var/secret
  volumes:
    - name: github-secret
      secret:
        secretName: $(inputs.params.GitHubSecretName)